<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qust.mapper.EmployeeMapper">

    <resultMap id="BaseResultMap" type="com.qust.domain.Employee">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="inputtime" property="inputtime" jdbcType="TIMESTAMP"/>
        <result column="tel" property="tel" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="state" property="state" jdbcType="TINYINT"/>
        <result column="admin" property="admin" jdbcType="TINYINT"/>
        <association property="department" javaType="com.qust.domain.Department" columnPrefix="d_">
            <result property="id" column="id"/>
            <result property="name" column="name"/>
        </association>

    </resultMap>

    <sql id="where_sql">
        <where>
            <if test="keyword !=null and keyword !=''">
                and e.username like  concat('%',#{keyword},'%')
                or e.tel like  concat('%',#{keyword},'%')
            </if>
        </where>
    </sql>

    <select id="getEmployeeList" resultMap="BaseResultMap">
        select 
         e.id,e.username,e.inputtime,e.tel,e.email,e.state,e.admin,
         d.id as d_id, d.name as d_name from employee as e 
         left join  department as d  on e.dep_id = d.id
        <include refid="where_sql"/>
         order by e.id
         limit #{start},#{rows}
    </select>

    <select id="getEmployeeNum" resultType="java.lang.Integer">
        select count(1) from employee
    </select>

    <insert id="saveEmployee"  useGeneratedKeys="true" keyProperty="id">
        insert into employee (username,password,inputtime,tel,email,state,admin,dep_id) value(
        #{username},#{password},#{inputtime},#{tel},#{email},#{state},#{admin},#{department.id})
    </insert>

    <insert id="saveEmployeeRoleRel">
        insert into employee_role_rel (eid,rid) value (#{eid},#{rid})
    </insert>

    <update id="updateEmployee">
        update  employee
        set
        username=#{username},inputtime=#{inputtime},tel=#{tel},email=#{email},
        admin=#{admin},dep_id=#{department.id}
        where id=#{id}
   </update>

    <update id="updateState">
        update  employee
        set
        state=false
        where id=#{id}
   </update>

    <delete id="deleteEmployeeRoleRel">
        delete from employee_role_rel where eid = #{id}
    </delete>

    <select id="findByName" resultMap="BaseResultMap">
        select * from employee where username=#{name}
    </select>

    <select id="getRoleById" resultType="java.lang.String">
        select * from employee_role_rel as er
        left  join role as r on er.rid=r.rid where eid=#{id}
    </select>

    <select id="getPermissionById" resultType="java.lang.String">
        select DISTINCT p.presource from role_permission_rel as rp
        LEFT join permission as p
        on rp.pid = p.pid where rid in(select rid from employee_role_rel where eid = #{id})
    </select>



</mapper>